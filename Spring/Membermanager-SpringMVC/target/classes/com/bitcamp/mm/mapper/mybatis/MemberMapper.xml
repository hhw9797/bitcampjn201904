<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- interface의 full name을 namespace의 속성으로 사용 : 필수 -->
<mapper namespace="com.bitcamp.mm.member.dao.MemberDaoInterface">

	<!-- select 결과 메핑을 위한 resultMap 설정 -->
	<resultMap id="resultMemberInfo"
		type="com.bitcamp.mm.member.domain.MemberInfo">
		<id property="idx" column="idx" />
		<result property="uId" column="uid" />
		<result property="uPw" column="upw" />
		<result property="uName" column="uname" />
		<result property="uPhoto" column="uphoto" />
		<result property="regDate" column="date" />
	</resultMap>

	<!-- 회원로그인 -->
	<select id="selectMemberById" resultMap="resultMemberInfo">
		select * from member
		where uId=#{uId}
	</select>

	<!-- 아이디 중복체크 -->
	<select id="selectMemberById2" resultMap="resultMemberInfo">
		select * from member
		where uId=#{uId}
	</select>

	<!-- 회원가입 -->
	<insert id="insertMember"
		parameterType="com.bitcamp.mm.member.domain.MemberInfo">
		insert into member (uId, uName, uPw, uPhoto) values
		(#{uId},#{uName},#{uPw},#{uPhoto})
	</insert>

	<!-- 회원 정보 수정을 위한 정보 획득 -->
	<select id="selectMemberByIdx" resultMap="resultMemberInfo">
		select * from member
		where idx=#{idx}
	</select>

	<!-- 회원정보수정 -->
	<update id="memberUpdate"
		parameterType="com.bitcamp.mm.member.domain.MemberInfo">
		update member set uName=#{uName}, uPw=#{uPw}, uPhoto=#{uPhoto} 
		where idx=#{idx}
	</update>

	<!-- 회원정보 삭제 -->
	<delete id="memberDelete">
		delete from member where idx=#{idx}
	</delete>

	<!-- 회원 리스트의 개수 : 검색을 위해 동적쿼리 적용 -->
	<select id="selectTotalCount"
		parameterType="com.bitcamp.mm.member.domain.SearchParam"
		resultType="int">
		select count(*) from member

		<where>

			<if test="stype != null">
				<if test="stype == 'both'">
					uId LIKE CONCAT('%', #{keyword}, '%') or uName LIKE
					CONCAT('%', #{keyword}, '%')
				</if>
				<if test="stype == 'id'">
					uId LIKE CONCAT('%', #{keyword}, '%')
				</if>
				<if test="stype == 'name'">
					uName LIKE CONCAT('%', #{keyword}, '%')
				</if>

			</if>


		</where>

	</select>


	<!-- 회원 리스트 : 검색을 위해 동적쿼리 적용 -->
	<select id="selectList" parameterType="map"
		resultMap="resultMemberInfo">
		SELECT * FROM member
		<where>
			<if test="search != null">
				<if test="search.stype == 'both'">
					<include refid="whereId"/>
					<include refid="whereName"/>
					<!-- uId LIKE CONCAT('%', #{search.keyword}, '%') or uName LIKE CONCAT('%', #{search.keyword}, '%') -->
				</if>
				<if test="search.stype == 'id'">				
					<include refid="whereId"/>
					<!-- uId LIKE CONCAT('%', #{search.keyword}, '%') -->
				</if>
				<if test="search.stype == 'name'">
					<include refid="whereName"/>
					<!-- uName LIKE CONCAT('%', #{search.keyword}, '%') -->
				</if>
			</if>
		</where>
		<!-- limit #{param1}, #{param2} -->
		limit #{index}, #{count}
	</select>
		
	<sql id="whereId">
		or uId LIKE CONCAT('%', #{search.keyword}, '%')
	</sql>
		
	<sql id="whereName">
		or uName LIKE CONCAT('%', #{search.keyword}, '%')
	</sql>
	
	<!-- 전체 회원 리스트 구하기 -->
	<select id="selectAllList" resultMap="resultMemberInfo">
		select * from member order by uName
	</select>


</mapper>