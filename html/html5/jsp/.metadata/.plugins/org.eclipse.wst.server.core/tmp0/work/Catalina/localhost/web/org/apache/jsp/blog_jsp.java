/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2019-06-19 08:08:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class blog_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/frame/header.jsp", Long.valueOf(1560930525012L));
    _jspx_dependants.put("/frame/footer.jsp", Long.valueOf(1560930520396L));
    _jspx_dependants.put("/frame/aside.jsp", Long.valueOf(1560930520921L));
    _jspx_dependants.put("/frame/nav.jsp", Long.valueOf(1560930522148L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-1.12.4.js\"></script>\r\n");
      out.write("<link href=\"frame/blogstyle.css\" rel=\"stylesheet\" media=\"screen\">\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"main_wrap\">\r\n");
      out.write("\t\t<!-- header 시작 -->\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("<div id=\"header\">\r\n");
      out.write("    <h1>Won's Blog</h1>\r\n");
      out.write("    <h4>PEANUTS</h4>\r\n");
      out.write("</div>\r\n");
      out.write("                \r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("\t\t<!-- header 끝 -->\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<!--nav 시작 -->\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("<div id=\"nav\">\r\n");
      out.write("    <div id=\"menu\">\r\n");
      out.write("    <ul>\r\n");
      out.write("        <li><a href=\"#\">스누피</a></li>\r\n");
      out.write("        <li><a href=\"#\">찰리브라운</a></li>\r\n");
      out.write("        <li><a href=\"#\">루시 반 펠트</a></li>\r\n");
      out.write("        <li><a href=\"#\">라이너스 반 펠트</a></li>\r\n");
      out.write("    </ul>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div id=\"search\">\r\n");
      out.write("        <input type=\"text\" ><input type=\"button\" value=\"검색\">\r\n");
      out.write("    </div>\r\n");
      out.write("</div>");
      out.write("\r\n");
      out.write("\t\t<!--nav 끝 -->\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<!-- contents 시작 -->\r\n");
      out.write("\t\t<div id=\"contnets\">\r\n");
      out.write("\t\t    <div id=\"content\">\r\n");
      out.write("\t\t        <article>\r\n");
      out.write("\t\t            <h1 class=\"title\">스누피</h1>\r\n");
      out.write("\t\t            <span class=\"date\">2019.06.05 14:55</span>\r\n");
      out.write("\t\t            <img class=\"img\" src=\"images/snoopy.gif\">\r\n");
      out.write("\t\t            <p>만화 피너츠의 캐릭터이자 세계에서 가장 유명한 개 캐릭터.</p>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t            <p>견종은 비글. 그래서인지 작중에서도 인간이 할 수 있는 일을 강아지의 몸으로 하기도 하는 만능 엔터테이너.</p>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t            <p>만화 피너츠의 진 주인공이며, 자신의 주인인 찰리 브라운보다도 더 유명해진 견공. 피너츠라는 만화 자체가 아주아주 처음 연재될 때는 찰리 브라운을 필두로 주변인들과 벌어지는 일들이 내용이었으나, 이제는 피너츠라는 만화 원래 이름보다 스누피라는 이름이 더 많이 알려져 한국 정식발매판에는 왠지 꼬박꼬박 스누피라는 이름으로만 알려졌었다. 그러다 90년대 후반에 원판 직번역본부터 피너츠라는 원래 이름을 쓰기 시작해서 그제서야 한국에 이름이 알려진 케이스로 그만큼 스누피는 피너츠라는 만화의 대명사이자 마스코트격 존재다.</p>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t            <p>원래 처음 주인공은 찰리 브라운이었고 따라서 스누피도 4차원 강아지가 아니라 그냥 평범한 비글견(!)이였다. 당연히 연재초반에는 4족보행이었다. 그러다가 가면 갈수록 지능도 생겨나고 대사도 생기더니 급기야는 2족보행까지 했다.</p>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t        </article>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t        <article>\r\n");
      out.write("\t\t            <h1 class=\"title\">찰리브라운</h1>\r\n");
      out.write("\t\t            <span class=\"date\">2019.06.05 14:55</span>\r\n");
      out.write("\t\t            <img class=\"img\" src=\"images/char.jpg\">\r\n");
      out.write("\t\t            <p>피너츠의 영원한 주인공. 만화에서의 공감요소와 재미의 대부분을 담당하고 있다. 일단 자신이 무슨 일을 시작해서 좋게 끝난 적이 거의 없으며 연 날리는 것조차 못한다. 밖에 나가면 아는 친구한테 갈굼당하지, 공감해 주는 사람(?)도 많지는 않는데다가 심지어는 공부도 제대로 못하는 비운의 주인공.</p>\r\n");
      out.write("\t\t            <p>80년대 KBS-1TV 더빙판 (어깨동무 찰리 브라운)에서 성우는 송도영, 금성비디오 출시판 성우는 정경애[2] 극장판 스누피: 더 피너츠 무비에서는 아역배우 이종원이 맡았는데 평이 나쁘다. 참고로 이종원은 굿 다이노에서도 주인공 알로 목소리를 맡았는데 거기서도 평이 나빴다.</p>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t            <p>동그랗고 대머리같아 보이는 외모[3]에 그리고 검은 지그재그의 줄이 그려진 셔츠를 입고 있다. 그러나 대부분 인기나 유명세, 관련 상품들을 보면 자기 애완동물 스누피에게도 밀린다. 오히려 자기를 주인취급하지 않는 스누피를 어떻게든 잘 돌봐주려 노력하는 수준의 대인배.[4] 작가의 어린 시절을 모티브로 만들어진 캐릭터라고 한다. 후지코 F. 후지오가 자신의 어린 시절을 바탕으로 도라에몽의 안습캐 노진구를 만든 것과도 비슷한 맥락이다. 원본에서의 말버릇은 \"Good grief\" 등이 있다. 반대로 가장 많이 듣는 말은 \"You blockhead!{이 멍청아!}\"이다.</p>\r\n");
      out.write("\t\t            <p>풀 네임은 찰스 \"찰리\" 브라운(Charles \"Charlie\" Brown)이다. 마시는 \"찰스\"라고 부르며, 페퍼민트 패티는 \"척(Chuck)\"이라고 부른다.</p>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t            \r\n");
      out.write("\t\t        </article>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t    </div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- contents 끝 -->\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<!--aside 시작 -->\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("<div id=\"aside\">\r\n");
      out.write("    <h4>광고1</h4>\r\n");
      out.write("    <ul>\r\n");
      out.write("        <li>link1</li>\r\n");
      out.write("        <li>link2</li>\r\n");
      out.write("        <li>link3</li>\r\n");
      out.write("        <li>link4</li>\r\n");
      out.write("        <li>link5</li>\r\n");
      out.write("    </ul>\r\n");
      out.write("    <h4>광고1</h4>\r\n");
      out.write("    <ul>\r\n");
      out.write("        <li>link1</li>\r\n");
      out.write("        <li>link2</li>\r\n");
      out.write("        <li>link3</li>\r\n");
      out.write("        <li>link4</li>\r\n");
      out.write("        <li>link5</li>\r\n");
      out.write("    </ul>\r\n");
      out.write("</div>");
      out.write("\r\n");
      out.write("\t\t<!--aside 끝 -->\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<!-- footer 시작 -->\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("<div id=\"footer\">\r\n");
      out.write("\t이 저작물은 CC BY-NC-SA 2.0 KR에 따라 이용할 수 있습니다. (단, 라이선스가 명시된 일부 문서 및 삽화 제외)\r\n");
      out.write("\t기여하신 문서의 저작권은 각 기여자에게 있으며, 각 기여자는 기여하신 부분의 저작권을 갖습니다. \r\n");
      out.write("\t\r\n");
      out.write("\t나무위키는 백과사전이 아니며 검증되지 않았거나, 편향적이거나, 잘못된 서술이 있을 수 있습니다.\r\n");
      out.write("\t나무위키는 위키위키입니다. 여러분이 직접 문서를 고칠 수 있으며, 다른 사람의 의견을 원할 경우 직접 토론을 발제할 수 있습니다.\r\n");
      out.write("</div>");
      out.write("\r\n");
      out.write("\t\t<!--footer 끝 -->\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
